generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InquiryForm {
  id          String   @id @default(cuid())
  message     String
  phoneNumber String?
  email       String?
  createdAt   DateTime @default(now())
}

model AvailableVisit {
  id               String            @id @default(cuid())
  dateFrom         DateTime          @map("dateFrom") @db.DateTime(0)
  dateTo           DateTime          @map("dateTo") @db.DateTime(0)
  visitReservation VisitReservation?

  @@unique([dateFrom, dateTo])
}

enum ConfirmationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model VisitReservation {
  id                         String             @id @default(cuid())
  customerConfirmationStatus ConfirmationStatus @default(PENDING)
  ownerConfirmationStatus    ConfirmationStatus @default(CONFIRMED)
  name                       String
  phoneNumber                String
  email                      String
  message                    String?            @db.Text
  availableVisit             AvailableVisit     @relation(fields: [availableVisitId], references: [id])
  availableVisitId           String             @unique
  createdAt                  DateTime           @default(now())
}
